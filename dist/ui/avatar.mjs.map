{"version":3,"sources":["../../src/lib/utils.ts","../../src/ui/avatar.tsx"],"names":["type","color"],"mappings":"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","file":"avatar.mjs","sourcesContent":["import { clsx, type ClassValue } from \"clsx\";\nimport { twMerge } from \"tailwind-merge\";\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs));\n}\n","import { cva } from \"cva\";\nimport * as React from \"react\";\nimport { cn } from \"../lib/utils\";\nimport { View, Text, Image } from \"react-native\";\n\nexport const sizes = [\"xsmall\", \"small\", \"medium\", \"large\", \"xlarge\"] as const;\n\nexport const type = [\"base\", \"rounded\"] as const;\n\nexport const color = [\n  \"viridian\",\n  \"malibu\",\n  \"yellow\",\n  \"purple\",\n  \"lilac\",\n  \"barbie\",\n  \"smoke\",\n  \"army\",\n  \"flubber\",\n  \"indigo\",\n  \"camel\",\n] as const;\n\nconst textSizes = {\n  xsmall: \"text-sm\",\n  small: \"text-sm\",\n  medium: \"text-md\",\n  large: \"text-2xl\",\n  xlarge: \"text-3xl\",\n};\n\nconst avatarVariants = cva({\n  base: \"flex shrink-0 items-center justify-center overflow-hidden text-center font-semibold\",\n  variants: {\n    size: {\n      xsmall: \"w-5 h-5 rounded-xs\",\n      small: \"w-6 h-6 rounded-sm\",\n      medium: \"w-8 h-8 rounded\",\n      large: \"w-14 h-14 rounded-xl\",\n      xlarge: \"w-18 h-18 rounded-[20px]\",\n    } satisfies Record<(typeof sizes)[number], string>,\n    type: {\n      base: \"\",\n      rounded: \"rounded-full\",\n    } satisfies Record<(typeof type)[number], string>,\n    color: {\n      viridian: \"bg-[hsl(theme(colors.viridian.50))]\",\n      malibu: \"bg-[hsl(theme(colors.malibu.50))]\",\n      yellow: \"bg-[hsl(theme(colors.yellow.50))]\",\n      purple: \"bg-[hsl(theme(colors.purple.50))]\",\n      lilac: \"bg-[hsl(theme(colors.lilac.50))]\",\n      barbie: \"bg-[hsl(theme(colors.barbie.50))]\",\n      smoke: \"bg-[hsl(theme(colors.smoke.50))]\",\n      army: \"bg-[hsl(theme(colors.army.50))]\",\n      flubber: \"bg-[hsl(theme(colors.flubber.50))]\",\n      indigo: \"bg-[hsl(theme(colors.indigo.50))]\",\n      camel: \"bg-[hsl(theme(colors.camel.50))]\",\n    } satisfies Record<(typeof color)[number], string>,\n  },\n  defaultVariants: {\n    size: \"medium\",\n    type: \"base\",\n    color: \"viridian\",\n  },\n});\n\ntype AvatarProps = React.ComponentPropsWithoutRef<typeof View> & {\n  size?: (typeof sizes)[number];\n  type?: (typeof type)[number];\n  color?: (typeof color)[number];\n  className?: string;\n};\n\nconst Avatar = ({ size, type, color, className, ...props }: AvatarProps) => (\n  <View\n    className={cn(avatarVariants({ size, type, color, className }))}\n    {...props}\n  />\n);\n\nconst AvatarImage = ({\n  className,\n  alt,\n  src,\n  ...props\n}: React.ComponentPropsWithoutRef<typeof View> & {\n  src?: string;\n  alt: string;\n}) => (\n  <View className={cn(\"aspect-square h-full w-full\", className)} {...props}>\n    <Image\n      style={{ width: \"100%\", height: \"100%\" }}\n      source={{\n        uri: src,\n      }}\n      aria-label={alt}\n    />\n  </View>\n);\n\nconst AvatarFallback = ({\n  className,\n  size = \"medium\",\n  ...props\n}: React.ComponentPropsWithoutRef<typeof Text> & {\n  size?: (typeof sizes)[number];\n}) => (\n  <Text\n    className={cn(\"text-f1-foreground-inverse/90\", textSizes[size], className)}\n    {...props}\n  />\n);\n\nexport { Avatar, AvatarFallback, AvatarImage };\n"]}