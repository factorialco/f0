{"version":3,"sources":["../../src/lib/utils.ts","../../src/lib/emojis.tsx"],"names":[],"mappings":";;;;;;;;;AAGO,SAAS,MAAM,MAAA,EAAsB;AAC1C,EAAA,OAAO,OAAA,CAAQ,IAAA,CAAK,MAAM,CAAC,CAAA;AAC7B;ACaO,SAAS,UAAA,CAAW,EAAE,KAAA,EAAO,IAAA,EAAM,WAAU,EAAoB;AACtE,EAAA,MAAM,WAAA,GAAc,WAAW,KAAK,CAAA;AAEpC,EAAA,MAAM,CAAC,KAAA,EAAO,QAAQ,CAAA,GAAI,SAAS,KAAK,CAAA;AAExC,EAAA,OAAO,eAAe,CAAC,KAAA,uBACpB,IAAA,EAAA,EAAK,SAAA,EAAW,MAAM,IAAA,EACrB,QAAA,kBAAA,GAAA;AAAA,IAAC,MAAA;AAAA,IAAA;AAAA,MACC,OAAA,EAAS,MAAM,QAAA,CAAS,IAAI,CAAA;AAAA,MAC5B,KAAA,EAAM,MAAA;AAAA,MACN,MAAA,EAAO,MAAA;AAAA,MACP,KAAK,WAAA,CAAY;AAAA;AAAA,GACnB,EACF,CAAA,mBAEA,GAAA,CAAC,IAAA,EAAA,EAAK,SAAA,EAAW,EAAA,CAAG,IAAA,EAAM,IAAA,EAAM,SAAS,CAAA,EACtC,QAAA,EAAA,KAAA,EAAA,EAD8C,KAEjD,CAAA;AAEJ;AAEA,IAAM,UAAA,GAAa,CAAC,KAAA,KAAsC;AACxD,EAAA,MAAM,CAAC,MAAM,CAAA,GAAI,KAAA,CAAM,KAAA,EAAO;AAAA,IAC5B,QAAA,EAAU,CAAC,UAAA,KACT,CAAA,8DAAA,EAAiE,UAAU,CAAA,IAAA;AAAA,GAC9E,CAAA;AAED,EAAA,OAAO,MAAA,IAAU,IAAA;AACnB,CAAA","file":"emojis.mjs","sourcesContent":["import { clsx, type ClassValue } from \"clsx\";\nimport { twMerge } from \"tailwind-merge\";\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs));\n}\n","import { Text, View } from \"react-native\";\nimport { cn } from \"./utils\";\nimport { parse } from \"twemoji-parser\";\nimport { SvgUri } from \"react-native-svg\";\nimport { useState } from \"react\";\n\ninterface ParseObject {\n  url: string;\n  indices: [number, number];\n  text: string;\n}\n\nexport interface EmojiImageProps {\n  size?: { icon: string; text: string };\n  className?: string;\n  emoji: string;\n}\n\nexport function EmojiImage({ emoji, size, className }: EmojiImageProps) {\n  const emojiEntity = parseEmoji(emoji);\n\n  const [error, setError] = useState(false);\n\n  return emojiEntity && !error ? (\n    <View className={size?.icon}>\n      <SvgUri\n        onError={() => setError(true)}\n        width=\"100%\"\n        height=\"100%\"\n        uri={emojiEntity.url}\n      />\n    </View>\n  ) : (\n    <Text className={cn(size?.text, className)} key={emoji}>\n      {emoji}\n    </Text>\n  );\n}\n\nconst parseEmoji = (emoji: string): ParseObject | null => {\n  const [entity] = parse(emoji, {\n    buildUrl: (codePoints: string) =>\n      `https://cdn.jsdelivr.net/gh/twitter/twemoji@latest/assets/svg/${codePoints}.svg`,\n  });\n\n  return entity || null;\n};\n"]}