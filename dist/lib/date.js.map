{"version":3,"sources":["../../src/lib/date.ts"],"names":["format","formatDistanceToNowStrict","isToday","isYesterday","differenceInDays","startOfDay","startOfMonth","startOfWeek","startOfYear"],"mappings":";;;;;AAYO,SAAS,WAAW,IAAA,EAAY;AACrC,EAAA,OAAOA,cAAA,CAAO,MAAM,GAAG,CAAA;AACzB;AAEO,SAAS,kBAAkB,IAAA,EAAY;AAC5C,EAAA,OAAOA,cAAA,CAAO,MAAM,OAAO,CAAA;AAC7B;AAEO,SAAS,mBAAmB,IAAA,EAAY;AAC7C,EAAA,OAAOA,cAAA,CAAO,MAAM,KAAK,CAAA;AAC3B;AAEO,SAAS,cAAc,IAAA,EAAY;AACxC,EAAA,OAAO,KAAK,OAAA,EAAQ;AACtB;AAEO,SAAS,MAAA,CAAO,IAAA,EAAY,SAAA,GAAY,IAAA,EAAM;AACnD,EAAA,OAAOC,iCAAA,CAA0B,IAAA,EAAM,EAAE,SAAA,EAAW,CAAA;AACtD;AAMO,SAAS,8BACd,IAAA,EACA,EAAE,oBAAoB,IAAA,EAAK,GAA0C,EAAC,EACtE;AACA,EAAA,IAAIC,eAAA,CAAQ,IAAI,CAAA,EAAG;AACjB,IAAA,OAAO,OAAO,IAAI,CAAA;AAAA,EACpB;AAEA,EAAA,IAAIC,mBAAA,CAAY,IAAI,CAAA,EAAG;AACrB,IAAA,OAAO,oBAAoB,MAAA,CAAO,IAAI,CAAA,GAAIH,cAAA,CAAO,MAAM,GAAG,CAAA;AAAA,EAC5D;AAEA,EAAA,OAAOA,cAAA,CAAO,MAAM,MAAM,CAAA;AAC5B;AAIO,IAAM,qBAAA,GAAwB,CAInC,KAAA,EACA,SAAA,KACG;AACH,EAAA,MAAM,MAAA,GAAiC;AAAA,IACrC,OAAO,EAAC;AAAA,IACR,WAAW,EAAC;AAAA,IACZ,UAAU,EAAC;AAAA,IACX,WAAW;AAAC,GACd;AAEA,EAAA,KAAA,CAAM,OAAA,CAAQ,CAAC,IAAA,KAAS;AACtB,IAAA,MAAM,IAAA,GAAO,KAAK,SAAS,CAAA;AAE3B,IAAA,MAAM,QAAA,GAAW,KAAK,GAAA,CAAII,wBAAA,CAAiB,sBAAM,IAAI,IAAA,EAAM,CAAC,CAAA;AAE5D,IAAA,IAAIF,eAAA,CAAQ,IAAI,CAAA,EAAG;AACjB,MAAA,MAAA,CAAO,KAAA,CAAM,KAAK,IAAI,CAAA;AAAA,IACxB,CAAA,MAAA,IAAWC,mBAAA,CAAY,IAAI,CAAA,EAAG;AAC5B,MAAA,MAAA,CAAO,SAAA,CAAU,KAAK,IAAI,CAAA;AAAA,IAC5B,CAAA,MAAA,IAAW,YAAY,CAAA,EAAG;AACxB,MAAA,MAAA,CAAO,QAAA,CAAS,KAAK,IAAI,CAAA;AAAA,IAC3B,CAAA,MAAA,IAAW,YAAY,EAAA,EAAI;AACzB,MAAA,MAAA,CAAO,SAAA,CAAU,KAAK,IAAI,CAAA;AAAA,IAC5B,CAAA,MAAO;AACL,MAAA,MAAM,IAAA,GAAO,KAAK,WAAA,EAAY;AAC9B,MAAA,IAAI,CAAC,MAAA,CAAO,IAAI,CAAA,EAAG;AACjB,QAAA,MAAA,CAAO,IAAI,IAAI,EAAC;AAAA,MAClB;AACA,MAAA,MAAA,CAAO,IAAI,CAAA,CAAE,IAAA,CAAK,IAAI,CAAA;AAAA,IACxB;AAAA,EACF,CAAC,CAAA;AAED,EAAA,OAAO,MAAA;AACT;AAGA,IAAM,uBAAA,GAAyE;AAAA,EAC7E,GAAA,EAAKE,kBAAA;AAAA,EACL,KAAA,EAAOC,oBAAA;AAAA,EACP,IAAA,EAAMC,mBAAA;AAAA,EACN,IAAA,EAAMC;AACR,CAAA;AAEO,SAAS,kBAAA,CAAmB,MAAY,WAAA,EAA8B;AAC3E,EAAA,OACE,uBAAA,CAAwB,WAAW,CAAA,GAAI,IAAI,KAC3C,IAAI,KAAA,CAAM,CAAA,yBAAA,EAA4B,WAAW,CAAA,CAAE,CAAA;AAEvD","file":"date.js","sourcesContent":["import {\n  format,\n  formatDistanceToNowStrict,\n  differenceInDays,\n  isToday,\n  isYesterday,\n  startOfDay,\n  startOfMonth,\n  startOfWeek,\n  startOfYear,\n} from \"date-fns\";\n\nexport function formatTime(date: Date) {\n  return format(date, \"p\");\n}\n\nexport function formatTime24Hours(date: Date) {\n  return format(date, \"HH:mm\");\n}\n\nexport function getAbbreviateMonth(date: Date) {\n  return format(date, \"LLL\");\n}\n\nexport function getDayOfMonth(date: Date) {\n  return date.getDate();\n}\n\nexport function getAgo(date: Date, addSuffix = true) {\n  return formatDistanceToNowStrict(date, { addSuffix });\n}\n\ntype GetDisplayDateBasedOnDurationOptions = {\n  yesterdayRelative?: boolean;\n};\n\nexport function getDisplayDateBasedOnDuration(\n  date: Date,\n  { yesterdayRelative = true }: GetDisplayDateBasedOnDurationOptions = {},\n) {\n  if (isToday(date)) {\n    return getAgo(date);\n  }\n\n  if (isYesterday(date)) {\n    return yesterdayRelative ? getAgo(date) : format(date, \"p\");\n  }\n\n  return format(date, \"PPPp\");\n}\n\ntype DateGroup = \"today\" | \"yesterday\" | \"lastWeek\" | \"lastMonth\" | number;\n\nexport const categorizeItemsByDate = <\n  T extends Record<D, Date>,\n  D extends keyof T,\n>(\n  items: T[],\n  dateField: D,\n) => {\n  const groups: Record<DateGroup, T[]> = {\n    today: [],\n    yesterday: [],\n    lastWeek: [],\n    lastMonth: [],\n  };\n\n  items.forEach((item) => {\n    const date = item[dateField];\n\n    const diffDays = Math.abs(differenceInDays(date, new Date()));\n\n    if (isToday(date)) {\n      groups.today.push(item);\n    } else if (isYesterday(date)) {\n      groups.yesterday.push(item);\n    } else if (diffDays <= 7) {\n      groups.lastWeek.push(item);\n    } else if (diffDays <= 30) {\n      groups.lastMonth.push(item);\n    } else {\n      const year = date.getFullYear();\n      if (!groups[year]) {\n        groups[year] = [];\n      }\n      groups[year].push(item);\n    }\n  });\n\n  return groups;\n};\n\nexport type DateGranularity = \"day\" | \"week\" | \"month\" | \"year\";\nconst dateGranularityFunction: Record<DateGranularity, (date: Date) => Date> = {\n  day: startOfDay,\n  month: startOfMonth,\n  week: startOfWeek,\n  year: startOfYear,\n};\n\nexport function setDateGranularity(date: Date, granularity: DateGranularity) {\n  return (\n    dateGranularityFunction[granularity]?.(date) ||\n    new Error(`Invalid date granularity ${granularity}`)\n  );\n}\n"]}