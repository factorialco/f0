{"version":3,"sources":["../../../../src/lib/utils.ts","../../../../src/components/Tags/BaseTag/index.tsx","../../../../src/lib/text.ts","../../../../src/components/Icon/index.tsx","../../../../src/components/Tags/RawTag/index.tsx"],"names":["Icon","jsx"],"mappings":"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","file":"index.mjs","sourcesContent":["import { clsx, type ClassValue } from \"clsx\";\nimport { twMerge } from \"tailwind-merge\";\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs));\n}\n","import { ReactNode } from \"react\";\nimport { Pressable, Text, View } from \"react-native\";\nimport { cn } from \"../../../lib/utils\";\n\ntype Props = {\n  additionalAccesibleText?: string;\n  onClick?: () => void;\n  classNameContainer?: string;\n  classNameText?: string;\n} & (\n  | {\n      left: ReactNode;\n      text?: string;\n      right?: ReactNode;\n    }\n  | {\n      left?: ReactNode;\n      text: string;\n      right?: ReactNode;\n    }\n);\n\nexport const BaseTag = ({\n  left,\n  text,\n  right,\n  additionalAccesibleText,\n  onClick,\n  classNameContainer,\n  classNameText,\n}: Props) => (\n  <View className=\"flex items-start\">\n    <Pressable\n      className={cn(\n        \"flex flex-row items-center justify-start gap-0.5 rounded-full py-0.5 pr-2\",\n        onClick && \"cursor-pointer hover:bg-f1-background-hover\",\n        !text && \"aspect-square w-6 items-center justify-center p-1\",\n        !left ? \"pl-2\" : \"pl-1\",\n        classNameContainer,\n      )}\n      onPress={onClick}\n    >\n      {left}\n      {!!text && (\n        <Text\n          className={cn(\n            \"line-clamp-1 text-base font-medium text-f1-foreground\",\n            classNameText,\n          )}\n        >\n          {text}\n        </Text>\n      )}\n      {additionalAccesibleText && (\n        <Text className=\"sr-only text-base font-medium text-f1-foreground\">\n          {additionalAccesibleText}\n        </Text>\n      )}\n      {right}\n    </Pressable>\n  </View>\n);\n\nBaseTag.displayName = \"BaseTag\";\n","import { useEffect } from \"react\";\n\ntype Rules = {\n  disallowEmpty?: boolean;\n  minLength?: number;\n  maxLength?: number;\n};\n\nconst textFormatEnforcer = (text: string, rules: Rules) => {\n  if (rules.disallowEmpty && text.length === 0) {\n    throw Error(\"You need to provide some text that is not empty\");\n  }\n\n  if (rules.maxLength !== undefined && text.length > rules.maxLength) {\n    throw Error(\n      `\"${text}\" should have no more than ${rules.maxLength} characters`,\n    );\n  }\n\n  if (rules.minLength !== undefined && text.length < rules.minLength) {\n    throw Error(`\"${text}\" should have at least ${rules.minLength} characters`);\n  }\n};\n\nexport const useTextFormatEnforcer = (text?: string, rules?: Rules) => {\n  useEffect(() => {\n    if (text !== undefined && rules) {\n      textFormatEnforcer(text, rules);\n    }\n  }, [text, rules]);\n};\n","import { cva, type VariantProps } from \"cva\";\nimport React, {\n  forwardRef,\n  ForwardRefExoticComponent,\n  RefAttributes,\n} from \"react\";\nimport { SvgProps, Svg } from \"react-native-svg\";\nimport { cn } from \"../../lib/utils\";\nimport { cssInterop } from \"nativewind\";\n\nconst iconVariants = cva({\n  base: \"shrink-0\",\n  variants: {\n    size: {\n      xl: \"w-8 h-8 stroke-xl\",\n      lg: \"w-6 h-6 stroke-lg\",\n      md: \"w-5 h-5 stroke-md\",\n      sm: \"w-4 h-4 stroke-sm\",\n      xs: \"w-3 h-3 stroke-xs\",\n    },\n  },\n  defaultVariants: {\n    size: \"md\",\n  },\n});\n\nexport interface IconProps extends SvgProps, VariantProps<typeof iconVariants> {\n  icon: IconType;\n  testID?: string;\n  className?: string;\n  variant?:\n    | \"default\"\n    | \"critical\"\n    | \"neutral\"\n    | \"ghost\"\n    | \"outline\"\n    | \"promote\";\n  isPressed?: boolean;\n}\n\nexport type IconType = ForwardRefExoticComponent<\n  SvgProps &\n    RefAttributes<Svg> & {\n      className?: string;\n    }\n>;\n\n// Keep track of icons that have already had cssInterop applied\nconst interopAppliedIcons = new WeakSet();\n\n// Function to apply NativeWind interop to an icon component\nexport function applyIconInterop(icon: IconType) {\n  if (!interopAppliedIcons.has(icon)) {\n    cssInterop(icon, {\n      className: {\n        target: \"style\",\n        nativeStyleToProp: {\n          color: true,\n          opacity: true,\n        },\n      },\n    });\n    interopAppliedIcons.add(icon);\n  }\n  return icon;\n}\n\nexport const Icon = forwardRef<Svg, IconProps>(function Icon(\n  { size, icon, className, testID, ...props },\n  ref,\n) {\n  if (!icon) return null;\n\n  // Apply NativeWind interop to the icon if not already applied\n  const Component = applyIconInterop(icon);\n\n  return (\n    <Component\n      ref={ref}\n      {...props}\n      className={cn(iconVariants({ size }), className)}\n      testID={testID}\n    />\n  );\n});\n","import { BaseTag } from \"../BaseTag\";\nimport { useTextFormatEnforcer } from \"../../../lib/text\";\nimport { Icon, IconType } from \"../../Icon\";\nimport { cn } from \"../../../lib/utils\";\n\nexport type RawTagProps = {\n  text?: string;\n  additionalAccesibleText?: string;\n  icon?: IconType;\n  noBorder?: boolean;\n  className?: string;\n};\n\nexport const RawTag = ({\n  text,\n  additionalAccesibleText,\n  icon,\n  noBorder,\n  className,\n}: RawTagProps) => {\n  useTextFormatEnforcer(text, { disallowEmpty: true });\n\n  return (\n    <BaseTag\n      classNameContainer={cn(\n        !noBorder && \"border border-solid border-f1-border-secondary\",\n        className,\n      )}\n      classNameText=\"text-f1-foreground\"\n      left={\n        icon ? (\n          <Icon icon={icon} size=\"sm\" className=\"text-f1-icon\" aria-hidden />\n        ) : null\n      }\n      text={text}\n      additionalAccesibleText={additionalAccesibleText}\n    />\n  );\n};\n\nRawTag.displayName = \"RawTag\";\n"]}