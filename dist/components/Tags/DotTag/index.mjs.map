{"version":3,"sources":["../../../../src/lib/utils.ts","../../../../src/components/Tags/BaseTag/index.tsx","../../../../src/lib/text.ts","../../../../src/components/Tags/DotTag/index.tsx"],"names":["jsx","View"],"mappings":"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","file":"index.mjs","sourcesContent":["import { clsx, type ClassValue } from \"clsx\";\nimport { twMerge } from \"tailwind-merge\";\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs));\n}\n","import { ReactNode } from \"react\";\nimport { Pressable, Text, View } from \"react-native\";\nimport { cn } from \"../../../lib/utils\";\n\ntype Props = {\n  additionalAccesibleText?: string;\n  onClick?: () => void;\n  classNameContainer?: string;\n  classNameText?: string;\n} & (\n  | {\n      left: ReactNode;\n      text?: string;\n      right?: ReactNode;\n    }\n  | {\n      left?: ReactNode;\n      text: string;\n      right?: ReactNode;\n    }\n);\n\nexport const BaseTag = ({\n  left,\n  text,\n  right,\n  additionalAccesibleText,\n  onClick,\n  classNameContainer,\n  classNameText,\n}: Props) => (\n  <View className=\"flex items-start\">\n    <Pressable\n      className={cn(\n        \"flex flex-row items-center justify-start gap-0.5 rounded-full py-0.5 pr-2\",\n        onClick && \"cursor-pointer hover:bg-f1-background-hover\",\n        !text && \"aspect-square w-6 items-center justify-center p-1\",\n        !left ? \"pl-2\" : \"pl-1\",\n        classNameContainer,\n      )}\n      onPress={onClick}\n    >\n      {left}\n      {!!text && (\n        <Text\n          className={cn(\n            \"line-clamp-1 text-base font-medium text-f1-foreground\",\n            classNameText,\n          )}\n        >\n          {text}\n        </Text>\n      )}\n      {additionalAccesibleText && (\n        <Text className=\"sr-only text-base font-medium text-f1-foreground\">\n          {additionalAccesibleText}\n        </Text>\n      )}\n      {right}\n    </Pressable>\n  </View>\n);\n\nBaseTag.displayName = \"BaseTag\";\n","import { useEffect } from \"react\";\n\ntype Rules = {\n  disallowEmpty?: boolean;\n  minLength?: number;\n  maxLength?: number;\n};\n\nconst textFormatEnforcer = (text: string, rules: Rules) => {\n  if (rules.disallowEmpty && text.length === 0) {\n    throw Error(\"You need to provide some text that is not empty\");\n  }\n\n  if (rules.maxLength !== undefined && text.length > rules.maxLength) {\n    throw Error(\n      `\"${text}\" should have no more than ${rules.maxLength} characters`,\n    );\n  }\n\n  if (rules.minLength !== undefined && text.length < rules.minLength) {\n    throw Error(`\"${text}\" should have at least ${rules.minLength} characters`);\n  }\n};\n\nexport const useTextFormatEnforcer = (text?: string, rules?: Rules) => {\n  useEffect(() => {\n    if (text !== undefined && rules) {\n      textFormatEnforcer(text, rules);\n    }\n  }, [text, rules]);\n};\n","import { baseColors } from \"@factorialco/f0-core\";\nimport { BaseTag } from \"../BaseTag\";\nimport { useTextFormatEnforcer } from \"../../../lib/text\";\nimport { View } from \"react-native\";\n\nexport type NewColor = Extract<\n  keyof typeof baseColors,\n  | \"viridian\"\n  | \"malibu\"\n  | \"yellow\"\n  | \"purple\"\n  | \"lilac\"\n  | \"barbie\"\n  | \"smoke\"\n  | \"army\"\n  | \"flubber\"\n  | \"indigo\"\n  | \"camel\"\n>;\n\nexport const dotTagColors = Object.keys(baseColors) as NewColor[];\n\nexport type DotTagProps = {\n  text: string;\n} & ({ color: NewColor } | { customColor: string });\n\nexport const DotTag = ({ text, ...props }: DotTagProps) => {\n  useTextFormatEnforcer(text, { disallowEmpty: true });\n\n  const backgroundColor =\n    \"color\" in props && props.color\n      ? `hsl(${baseColors[props.color][50]})`\n      : \"customColor\" in props && props.customColor;\n\n  if (!backgroundColor) return null;\n\n  return (\n    <BaseTag\n      classNameContainer=\"border border-solid border-f1-border-secondary\"\n      left={\n        <View\n          className=\"m-1 aspect-square w-2 rounded-full\"\n          style={{\n            backgroundColor,\n          }}\n          aria-hidden\n        />\n      }\n      text={text}\n    />\n  );\n};\n\nDotTag.displayName = \"DotTag\";\n"]}