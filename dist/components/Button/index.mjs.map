{"version":3,"sources":["../../../src/lib/utils.ts","../../../src/components/Icon/index.tsx","../../../src/components/Button/index.tsx"],"names":["Icon","cva","forwardRef","Button","jsx"],"mappings":"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","file":"index.mjs","sourcesContent":["import { clsx, type ClassValue } from \"clsx\";\nimport { twMerge } from \"tailwind-merge\";\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs));\n}\n","import { cva, type VariantProps } from \"cva\";\nimport React, {\n  forwardRef,\n  ForwardRefExoticComponent,\n  RefAttributes,\n} from \"react\";\nimport { SvgProps, Svg } from \"react-native-svg\";\nimport { cn } from \"../../lib/utils\";\nimport { cssInterop } from \"nativewind\";\n\nconst iconVariants = cva({\n  base: \"shrink-0\",\n  variants: {\n    size: {\n      xl: \"w-8 h-8 stroke-xl\",\n      lg: \"w-6 h-6 stroke-lg\",\n      md: \"w-5 h-5 stroke-md\",\n      sm: \"w-4 h-4 stroke-sm\",\n      xs: \"w-3 h-3 stroke-xs\",\n    },\n  },\n  defaultVariants: {\n    size: \"md\",\n  },\n});\n\nexport interface IconProps extends SvgProps, VariantProps<typeof iconVariants> {\n  icon: IconType;\n  testID?: string;\n  className?: string;\n  variant?:\n    | \"default\"\n    | \"critical\"\n    | \"neutral\"\n    | \"ghost\"\n    | \"outline\"\n    | \"promote\";\n  isPressed?: boolean;\n}\n\nexport type IconType = ForwardRefExoticComponent<\n  SvgProps &\n    RefAttributes<Svg> & {\n      className?: string;\n    }\n>;\n\n// Keep track of icons that have already had cssInterop applied\nconst interopAppliedIcons = new WeakSet();\n\n// Function to apply NativeWind interop to an icon component\nexport function applyIconInterop(icon: IconType) {\n  if (!interopAppliedIcons.has(icon)) {\n    cssInterop(icon, {\n      className: {\n        target: \"style\",\n        nativeStyleToProp: {\n          color: true,\n          opacity: true,\n        },\n      },\n    });\n    interopAppliedIcons.add(icon);\n  }\n  return icon;\n}\n\nexport const Icon = forwardRef<Svg, IconProps>(function Icon(\n  { size, icon, className, testID, ...props },\n  ref,\n) {\n  if (!icon) return null;\n\n  // Apply NativeWind interop to the icon if not already applied\n  const Component = applyIconInterop(icon);\n\n  return (\n    <Component\n      ref={ref}\n      {...props}\n      className={cn(iconVariants({ size }), className)}\n      testID={testID}\n    />\n  );\n});\n","import { cva, type VariantProps } from \"cva\";\nimport React, { forwardRef, useState } from \"react\";\nimport { Pressable, Text, View } from \"react-native\";\nimport { cn } from \"../../lib/utils\";\nimport { Icon, type IconType } from \"../Icon\";\n\nexport const variants = [\n  \"default\",\n  \"outline\",\n  \"critical\",\n  \"neutral\",\n  \"ghost\",\n  \"promote\",\n] as const;\nexport type ButtonVariant = (typeof variants)[number];\n\nexport const sizes = [\"sm\", \"md\", \"lg\"] as const;\nexport type ButtonSize = (typeof sizes)[number];\n\nconst buttonVariants = cva({\n  base: \"flex-row items-center justify-center rounded border-none grow-0\",\n  variants: {\n    variant: {\n      default: \"bg-f1-background-accent-bold\",\n      outline: \"bg-f1-background-inverse-secondary border border-f1-border\",\n      neutral: \"bg-f1-background-secondary\",\n      critical: \"bg-f1-background-secondary border border-f1-border\",\n      ghost: \"bg-transparent\",\n      promote: \"bg-f1-background-promote border border-f1-border-promote\",\n    },\n    size: {\n      sm: \"h-6 rounded-sm\",\n      md: \"h-8 rounded\",\n      lg: \"h-10 rounded-md\",\n    },\n    disabled: {\n      true: \"opacity-50\",\n      false: \"\",\n    },\n    round: {\n      true: \"aspect-square p-0\",\n      false: \"gap-1 px-2 sm:px-3 lg:px-4\",\n    },\n  },\n  defaultVariants: {\n    variant: \"default\",\n    size: \"md\",\n    disabled: false,\n    round: false,\n  },\n});\n\nconst pressedVariants = cva({\n  base: \"\",\n  variants: {\n    variant: {\n      default: \"bg-f1-background-accent-bold-hover\",\n      outline: \"bg-f1-background-tertiary border-opacity-70\",\n      neutral: \"bg-f1-background-secondary-hover\",\n      critical: \"bg-f1-background-critical-bold border-transparent\",\n      ghost: \"bg-f1-background-secondary-hover\",\n      promote: \"bg-f1-background-promote-hover\",\n    },\n  },\n  defaultVariants: {\n    variant: \"default\",\n  },\n});\n\nconst getIconColor = (variant: ButtonVariant, isPressed: boolean) => {\n  switch (variant) {\n    case \"default\":\n      return \"text-f1-icon-inverse\";\n    case \"critical\":\n      return isPressed ? \"text-f1-icon-inverse\" : \"text-f1-icon-critical-bold\";\n    default:\n      return \"text-f1-icon\";\n  }\n};\n\nconst getIconOnlyColor = (variant: ButtonVariant, isPressed: boolean) => {\n  switch (variant) {\n    case \"critical\":\n      return isPressed ? \"text-f1-icon-inverse\" : \"text-f1-icon-critical-bold\";\n    case \"default\":\n      return \"text-f1-icon-inverse\";\n    case \"outline\":\n    case \"neutral\":\n    case \"ghost\":\n    case \"promote\":\n    default:\n      return \"text-f1-icon-bold\";\n  }\n};\n\nconst getTextColorClass = (variant: ButtonVariant, isPressed: boolean) => {\n  if (isPressed && variant === \"critical\") {\n    return \"text-f1-foreground-inverse\";\n  }\n\n  switch (variant) {\n    case \"default\":\n      return \"text-f1-foreground-inverse\";\n    case \"critical\":\n      return \"text-f1-foreground-critical\";\n    default:\n      return \"text-f1-foreground\";\n  }\n};\n\nexport interface ButtonProps extends VariantProps<typeof buttonVariants> {\n  label: string;\n  onPress?: () => void | Promise<unknown>;\n  disabled?: boolean;\n  loading?: boolean;\n  icon?: IconType;\n  emoji?: string;\n  hideLabel?: boolean;\n  className?: string;\n  accessibilityHint?: string;\n  showBadge?: boolean;\n  fullWidth?: boolean;\n}\n\nexport const Button = forwardRef<View, ButtonProps>(function Button(\n  {\n    label,\n    onPress,\n    disabled = false,\n    loading = false,\n    icon,\n    emoji,\n    hideLabel = false,\n    variant = \"default\",\n    size = \"md\",\n    round = false,\n    className,\n    accessibilityHint,\n    showBadge = false,\n    fullWidth = false,\n  },\n  ref,\n) {\n  const [isLoading, setIsLoading] = useState(false);\n  const [isPressed, setIsPressed] = useState(false);\n\n  const handlePress = async () => {\n    if (!onPress || disabled || loading || isLoading) return;\n\n    const result = onPress();\n\n    if (result instanceof Promise) {\n      setIsLoading(true);\n      try {\n        await result;\n      } finally {\n        setIsLoading(false);\n      }\n    }\n  };\n\n  const isDisabled = disabled || loading || isLoading;\n  const accessibilityLabel = `${label}${isDisabled ? \", disabled\" : \"\"}${loading || isLoading ? \", loading\" : \"\"}`;\n  const shouldShowPressed = isPressed && !isDisabled;\n\n  return (\n    <View className={`flex ${fullWidth ? \"flex-1\" : \"item-start\"}`}>\n      <Pressable\n        ref={ref}\n        disabled={isDisabled}\n        onPressIn={() => setIsPressed(true)}\n        onPressOut={() => setIsPressed(false)}\n        onPress={handlePress}\n        className={cn(\n          buttonVariants({\n            variant,\n            size,\n            disabled: isDisabled,\n            round: hideLabel && round,\n          }),\n          shouldShowPressed && pressedVariants({ variant }),\n          className,\n        )}\n        accessibilityLabel={accessibilityLabel}\n        accessibilityRole=\"button\"\n        accessibilityState={{\n          disabled: isDisabled,\n          busy: loading || isLoading,\n        }}\n        accessibilityHint={accessibilityHint}\n      >\n        {icon && (\n          <Icon\n            icon={icon}\n            size={size === \"sm\" ? \"sm\" : \"md\"}\n            className={cn(\n              hideLabel && round ? undefined : \"-ml-0.5\",\n              hideLabel && round\n                ? getIconOnlyColor(variant, shouldShowPressed)\n                : getIconColor(variant, shouldShowPressed),\n            )}\n          />\n        )}\n        {emoji && (\n          <Text\n            className={cn(\n              \"text-base font-medium\",\n              getTextColorClass(variant, shouldShowPressed),\n            )}\n          >\n            {emoji}\n          </Text>\n        )}\n        {!hideLabel && (\n          <Text\n            className={cn(\n              \"text-base font-medium\",\n              getTextColorClass(variant, shouldShowPressed),\n            )}\n          >\n            {label}\n          </Text>\n        )}\n      </Pressable>\n      {showBadge && variant === \"outline\" && (\n        <View\n          accessibilityLabel=\"Notification Badge\"\n          className=\"absolute right-1.5 top-1.5 h-1.5 w-1.5 rounded-full bg-f1-icon-accent\"\n        />\n      )}\n    </View>\n  );\n});\n"]}