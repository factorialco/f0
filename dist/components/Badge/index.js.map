{"version":3,"sources":["../../../src/lib/utils.ts","../../../src/components/Icon/index.tsx","../../../src/components/Badge/index.tsx"],"names":["twMerge","clsx","cva","cssInterop","forwardRef","Icon","jsx"],"mappings":";;;;;;;;;;AAGO,SAAS,MAAM,MAAA,EAAsB;AAC1C,EAAA,OAAOA,qBAAA,CAAQC,SAAA,CAAK,MAAM,CAAC,CAAA;AAC7B;ACKA,IAAM,eAAeC,OAAA,CAAI;AAAA,EACvB,IAAA,EAAM,UAAA;AAAA,EACN,QAAA,EAAU;AAAA,IACR,IAAA,EAAM;AAAA,MACJ,EAAA,EAAI,mBAAA;AAAA,MACJ,EAAA,EAAI,mBAAA;AAAA,MACJ,EAAA,EAAI,mBAAA;AAAA,MACJ,EAAA,EAAI,mBAAA;AAAA,MACJ,EAAA,EAAI;AAAA;AACN,GACF;AAAA,EACA,eAAA,EAAiB;AAAA,IACf,IAAA,EAAM;AAAA;AAEV,CAAC,CAAA;AAwBD,IAAM,mBAAA,uBAA0B,OAAA,EAAQ;AAGjC,SAAS,iBAAiB,IAAA,EAAgB;AAC/C,EAAA,IAAI,CAAC,mBAAA,CAAoB,GAAA,CAAI,IAAI,CAAA,EAAG;AAClC,IAAAC,qBAAA,CAAW,IAAA,EAAM;AAAA,MACf,SAAA,EAAW;AAAA,QACT,MAAA,EAAQ,OAAA;AAAA,QACR,iBAAA,EAAmB;AAAA,UACjB,KAAA,EAAO,IAAA;AAAA,UACP,OAAA,EAAS;AAAA;AACX;AACF,KACD,CAAA;AACD,IAAA,mBAAA,CAAoB,IAAI,IAAI,CAAA;AAAA,EAC9B;AACA,EAAA,OAAO,IAAA;AACT;AAEO,IAAM,IAAA,GAAOC,gBAAA,CAA2B,SAASC,KAAAA,CACtD,EAAE,IAAA,EAAM,IAAA,EAAM,SAAA,EAAW,MAAA,EAAQ,GAAG,KAAA,EAAM,EAC1C,GAAA,EACA;AACA,EAAA,IAAI,CAAC,MAAM,OAAO,IAAA;AAGlB,EAAA,MAAM,SAAA,GAAY,iBAAiB,IAAI,CAAA;AAEvC,EAAA,uBACEC,cAAA;AAAA,IAAC,SAAA;AAAA,IAAA;AAAA,MACC,GAAA;AAAA,MACC,GAAG,KAAA;AAAA,MACJ,WAAW,EAAA,CAAG,YAAA,CAAa,EAAE,IAAA,EAAM,GAAG,SAAS,CAAA;AAAA,MAC/C;AAAA;AAAA,GACF;AAEJ,CAAC,CAAA;ACjFD,IAAM,gBAAgBJ,OAAAA,CAAI;AAAA,EACxB,IAAA,EAAM,wDAAA;AAAA,EACN,QAAA,EAAU;AAAA,IACR,IAAA,EAAM;AAAA,MACJ,OAAA,EAAS,6BAAA;AAAA,MACT,SAAA,EAAW,2BAAA;AAAA,MACX,QAAA,EAAU,2DAAA;AAAA,MACV,QAAA,EAAU,gDAAA;AAAA,MACV,OAAA,EAAS;AAAA,KACX;AAAA,IACA,IAAA,EAAM;AAAA,MACJ,EAAA,EAAI,aAAA;AAAA,MACJ,EAAA,EAAI,SAAA;AAAA,MACJ,EAAA,EAAI,SAAA;AAAA,MACJ,EAAA,EAAI;AAAA;AACN,GACF;AAAA,EACA,eAAA,EAAiB;AAAA,IACf,IAAA,EAAM,SAAA;AAAA,IACN,IAAA,EAAM;AAAA;AAEV,CAAC,CAAA;AAED,IAAM,SAAA,GAAY;AAAA,EAChB,EAAA,EAAI,IAAA;AAAA,EACJ,EAAA,EAAI,IAAA;AAAA,EACJ,EAAA,EAAI,IAAA;AAAA,EACJ,EAAA,EAAI;AACN,CAAA;AAOO,IAAM,QAAQ,CAAC,EAAE,MAAM,IAAA,GAAO,IAAA,EAAM,MAAK,KAAkB;AAChE,EAAA,uBACEI,cAAAA;AAAA,IAAC,IAAA;AAAA,IAAA;AAAA,MACC,SAAA,EAAW,aAAA,CAAc,EAAE,IAAA,EAAM,MAAM,CAAA;AAAA,MACvC,IAAA;AAAA,MACA,IAAA,EAAM,UAAU,IAAI;AAAA;AAAA,GACtB;AAEJ","file":"index.js","sourcesContent":["import { clsx, type ClassValue } from \"clsx\";\nimport { twMerge } from \"tailwind-merge\";\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs));\n}\n","import { cva, type VariantProps } from \"cva\";\nimport React, {\n  forwardRef,\n  ForwardRefExoticComponent,\n  RefAttributes,\n} from \"react\";\nimport { SvgProps, Svg } from \"react-native-svg\";\nimport { cn } from \"../../lib/utils\";\nimport { cssInterop } from \"nativewind\";\n\nconst iconVariants = cva({\n  base: \"shrink-0\",\n  variants: {\n    size: {\n      xl: \"w-8 h-8 stroke-xl\",\n      lg: \"w-6 h-6 stroke-lg\",\n      md: \"w-5 h-5 stroke-md\",\n      sm: \"w-4 h-4 stroke-sm\",\n      xs: \"w-3 h-3 stroke-xs\",\n    },\n  },\n  defaultVariants: {\n    size: \"md\",\n  },\n});\n\nexport interface IconProps extends SvgProps, VariantProps<typeof iconVariants> {\n  icon: IconType;\n  testID?: string;\n  className?: string;\n  variant?:\n    | \"default\"\n    | \"critical\"\n    | \"neutral\"\n    | \"ghost\"\n    | \"outline\"\n    | \"promote\";\n  isPressed?: boolean;\n}\n\nexport type IconType = ForwardRefExoticComponent<\n  SvgProps &\n    RefAttributes<Svg> & {\n      className?: string;\n    }\n>;\n\n// Keep track of icons that have already had cssInterop applied\nconst interopAppliedIcons = new WeakSet();\n\n// Function to apply NativeWind interop to an icon component\nexport function applyIconInterop(icon: IconType) {\n  if (!interopAppliedIcons.has(icon)) {\n    cssInterop(icon, {\n      className: {\n        target: \"style\",\n        nativeStyleToProp: {\n          color: true,\n          opacity: true,\n        },\n      },\n    });\n    interopAppliedIcons.add(icon);\n  }\n  return icon;\n}\n\nexport const Icon = forwardRef<Svg, IconProps>(function Icon(\n  { size, icon, className, testID, ...props },\n  ref,\n) {\n  if (!icon) return null;\n\n  // Apply NativeWind interop to the icon if not already applied\n  const Component = applyIconInterop(icon);\n\n  return (\n    <Component\n      ref={ref}\n      {...props}\n      className={cn(iconVariants({ size }), className)}\n      testID={testID}\n    />\n  );\n});\n","import { cva, type VariantProps } from \"cva\";\nimport { Icon, IconType } from \"../Icon\";\n\nconst badgeVariants = cva({\n  base: \"flex shrink-0 items-center justify-center rounded-full\",\n  variants: {\n    type: {\n      neutral: \"bg-transparent text-f1-icon\",\n      highlight: \"text-f1-special-highlight\",\n      positive: \"bg-f1-background-positive-bold text-f1-foreground-inverse\",\n      critical: \"bg-f1-icon-critical text-f1-foreground-inverse\",\n      warning: \"bg-f1-background-warning-bold text-f1-foreground-inverse\",\n    },\n    size: {\n      xs: \"h-2.5 w-2.5\",\n      sm: \"h-3 w-3\",\n      md: \"h-5 w-5\",\n      lg: \"h-6 w-6\",\n    },\n  },\n  defaultVariants: {\n    type: \"neutral\",\n    size: \"md\",\n  },\n});\n\nconst iconSizes = {\n  xs: \"xs\",\n  sm: \"xs\",\n  md: \"sm\",\n  lg: \"md\",\n} as const;\n\nexport interface BadgeProps extends VariantProps<typeof badgeVariants> {\n  icon: IconType;\n  size?: keyof typeof iconSizes;\n}\n\nexport const Badge = ({ type, size = \"md\", icon }: BadgeProps) => {\n  return (\n    <Icon\n      className={badgeVariants({ type, size })}\n      icon={icon}\n      size={iconSizes[size]}\n    />\n  );\n};\n"]}