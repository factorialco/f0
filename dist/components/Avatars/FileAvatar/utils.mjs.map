{"version":3,"sources":["../../../../src/components/Avatars/FileAvatar/utils.ts"],"names":[],"mappings":"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","file":"utils.mjs","sourcesContent":["type FileTypeInfo = {\n  type: string;\n  color: string;\n};\n\ntype FileLike = {\n  name: string;\n  type?: string;\n};\n\nconst FILE_TYPE_MAP: Record<string, FileTypeInfo> = {\n  pdf: { type: \"PDF\", color: \"text-f1-foreground-accent\" },\n  image: { type: \"IMG\", color: \"text-f1-foreground-info\" },\n  doc: { type: \"DOC\", color: \"text-f1-foreground-info\" },\n  excel: { type: \"XLS\", color: \"text-f1-foreground-positive\" },\n  ppt: { type: \"PPT\", color: \"text-f1-foreground-warning\" },\n  txt: { type: \"TXT\", color: \"text-f1-foreground-secondary\" },\n  video: { type: \"VID\", color: \"text-f1-foreground-info\" },\n  audio: { type: \"AUD\", color: \"text-f1-foreground-accent\" },\n  archive: { type: \"ZIP\", color: \"text-f1-foreground-warning\" },\n  csv: { type: \"CSV\", color: \"text-f1-foreground-positive\" },\n  html: { type: \"HTML\", color: \"text-f1-foreground-accent\" },\n  markdown: { type: \"MD\", color: \"text-f1-foreground-secondary\" },\n  default: { type: \"FILE\", color: \"text-f1-foreground\" },\n};\n\nconst MIME_MATCH_MAP: Record<string, keyof typeof FILE_TYPE_MAP> = {\n  pdf: \"pdf\",\n  image: \"image\",\n  word: \"doc\",\n  excel: \"excel\",\n  powerpoint: \"ppt\",\n  text: \"txt\",\n  video: \"video\",\n  audio: \"audio\",\n  archive: \"archive\",\n  csv: \"csv\",\n  html: \"html\",\n  markdown: \"markdown\",\n  zip: \"archive\",\n  rar: \"archive\",\n  tar: \"archive\",\n  gz: \"archive\",\n  \"7z\": \"archive\",\n};\n\nconst EXTENSION_MAP: Record<string, keyof typeof FILE_TYPE_MAP> = {\n  pdf: \"pdf\",\n  jpg: \"image\",\n  jpeg: \"image\",\n  png: \"image\",\n  gif: \"image\",\n  svg: \"image\",\n  doc: \"doc\",\n  docx: \"doc\",\n  xls: \"excel\",\n  xlsx: \"excel\",\n  csv: \"csv\",\n  ppt: \"ppt\",\n  pptx: \"ppt\",\n  txt: \"txt\",\n  mp4: \"video\",\n  mov: \"video\",\n  mkv: \"video\",\n  avi: \"video\",\n  webm: \"video\",\n  mp3: \"audio\",\n  wav: \"audio\",\n  flac: \"audio\",\n  ogg: \"audio\",\n  zip: \"archive\",\n  rar: \"archive\",\n  tar: \"archive\",\n  gz: \"archive\",\n  \"7z\": \"archive\",\n  html: \"html\",\n  htm: \"html\",\n  md: \"markdown\",\n  markdown: \"markdown\",\n};\n\nconst getFileTypeInfo = (file: FileLike): FileTypeInfo => {\n  const mimeType = file.type?.toLowerCase() ?? \"\";\n\n  const matchedMimeKey = Object.keys(MIME_MATCH_MAP).find((key) =>\n    mimeType.includes(key),\n  );\n\n  if (matchedMimeKey) {\n    const fileTypeKey = MIME_MATCH_MAP[matchedMimeKey];\n    if (fileTypeKey && FILE_TYPE_MAP[fileTypeKey]) {\n      return FILE_TYPE_MAP[fileTypeKey];\n    }\n  }\n\n  const extension = file.name.toLowerCase().split(\".\").pop();\n\n  if (extension && EXTENSION_MAP[extension]) {\n    const fileTypeKey = EXTENSION_MAP[extension];\n    if (fileTypeKey && FILE_TYPE_MAP[fileTypeKey]) {\n      return FILE_TYPE_MAP[fileTypeKey];\n    }\n  }\n\n  return FILE_TYPE_MAP.default!;\n};\n\nexport { getFileTypeInfo };\nexport type { FileTypeInfo, FileLike };\n"]}