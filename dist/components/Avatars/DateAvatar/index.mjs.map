{"version":3,"sources":["../../../../src/lib/date.ts","../../../../src/components/Avatars/DateAvatar/index.tsx"],"names":[],"mappings":";;;;;AAoBO,SAAS,mBAAmB,IAAA,EAAY;AAC7C,EAAA,OAAO,MAAA,CAAO,MAAM,KAAK,CAAA;AAC3B;AAEO,SAAS,cAAc,IAAA,EAAY;AACxC,EAAA,OAAO,KAAK,OAAA,EAAQ;AACtB;ACnBO,IAAM,UAAA,GAAa,CAAC,EAAE,IAAA,EAAK,KAAa;AAC7C,EAAA,MAAM,OAAA,GAAU,cAAc,IAAI,CAAA;AAClC,EAAA,MAAM,KAAA,GAAQ,mBAAmB,IAAI,CAAA;AAErC,EAAA,uBACE,IAAA,CAAC,IAAA,EAAA,EAAK,SAAA,EAAU,+IAAA,EACd,QAAA,EAAA;AAAA,oBAAA,GAAA,CAAC,IAAA,EAAA,EAAK,SAAA,EAAU,sHAAA,EACb,QAAA,EAAA,KAAA,EACH,CAAA;AAAA,oBACA,GAAA,CAAC,IAAA,EAAA,EAAK,SAAA,EAAU,uFAAA,EACb,QAAA,EAAA,OAAA,EACH;AAAA,GAAA,EACF,CAAA;AAEJ","file":"index.mjs","sourcesContent":["import {\n  format,\n  formatDistanceToNowStrict,\n  differenceInDays,\n  isToday,\n  isYesterday,\n  startOfDay,\n  startOfMonth,\n  startOfWeek,\n  startOfYear,\n} from \"date-fns\";\n\nexport function formatTime(date: Date) {\n  return format(date, \"p\");\n}\n\nexport function formatTime24Hours(date: Date) {\n  return format(date, \"HH:mm\");\n}\n\nexport function getAbbreviateMonth(date: Date) {\n  return format(date, \"LLL\");\n}\n\nexport function getDayOfMonth(date: Date) {\n  return date.getDate();\n}\n\nexport function getAgo(date: Date, addSuffix = true) {\n  return formatDistanceToNowStrict(date, { addSuffix });\n}\n\ntype GetDisplayDateBasedOnDurationOptions = {\n  yesterdayRelative?: boolean;\n};\n\nexport function getDisplayDateBasedOnDuration(\n  date: Date,\n  { yesterdayRelative = true }: GetDisplayDateBasedOnDurationOptions = {},\n) {\n  if (isToday(date)) {\n    return getAgo(date);\n  }\n\n  if (isYesterday(date)) {\n    return yesterdayRelative ? getAgo(date) : format(date, \"p\");\n  }\n\n  return format(date, \"PPPp\");\n}\n\ntype DateGroup = \"today\" | \"yesterday\" | \"lastWeek\" | \"lastMonth\" | number;\n\nexport const categorizeItemsByDate = <\n  T extends Record<D, Date>,\n  D extends keyof T,\n>(\n  items: T[],\n  dateField: D,\n) => {\n  const groups: Record<DateGroup, T[]> = {\n    today: [],\n    yesterday: [],\n    lastWeek: [],\n    lastMonth: [],\n  };\n\n  items.forEach((item) => {\n    const date = item[dateField];\n\n    const diffDays = Math.abs(differenceInDays(date, new Date()));\n\n    if (isToday(date)) {\n      groups.today.push(item);\n    } else if (isYesterday(date)) {\n      groups.yesterday.push(item);\n    } else if (diffDays <= 7) {\n      groups.lastWeek.push(item);\n    } else if (diffDays <= 30) {\n      groups.lastMonth.push(item);\n    } else {\n      const year = date.getFullYear();\n      if (!groups[year]) {\n        groups[year] = [];\n      }\n      groups[year].push(item);\n    }\n  });\n\n  return groups;\n};\n\nexport type DateGranularity = \"day\" | \"week\" | \"month\" | \"year\";\nconst dateGranularityFunction: Record<DateGranularity, (date: Date) => Date> = {\n  day: startOfDay,\n  month: startOfMonth,\n  week: startOfWeek,\n  year: startOfYear,\n};\n\nexport function setDateGranularity(date: Date, granularity: DateGranularity) {\n  return (\n    dateGranularityFunction[granularity]?.(date) ||\n    new Error(`Invalid date granularity ${granularity}`)\n  );\n}\n","import { View, Text } from \"react-native\";\nimport { getAbbreviateMonth, getDayOfMonth } from \"../../../lib/date\";\n\ntype Props = {\n  date: Date;\n};\n\nexport const DateAvatar = ({ date }: Props) => {\n  const dateDay = getDayOfMonth(date);\n  const month = getAbbreviateMonth(date);\n\n  return (\n    <View className=\"flex h-10 w-10 flex-col items-center justify-center rounded border border-solid border-f1-border-secondary bg-f1-background-inverse-secondary\">\n      <Text className=\"pt-0.5 text-xs font-semibold uppercase leading-3 text-f1-special-highlight dark:text-f1-foreground-inverse-secondary\">\n        {month}\n      </Text>\n      <Text className=\"flex items-center justify-center text-lg font-medium leading-tight text-f1-foreground\">\n        {dateDay}\n      </Text>\n    </View>\n  );\n};\n"]}