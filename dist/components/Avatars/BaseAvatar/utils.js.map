{"version":3,"sources":["../../../../src/ui/avatar.tsx","../../../../src/components/Avatars/BaseAvatar/utils.ts"],"names":["cva","name"],"mappings":"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","file":"utils.js","sourcesContent":["import { cva } from \"cva\";\nimport * as React from \"react\";\nimport { cn } from \"../lib/utils\";\nimport { View, Text, Image } from \"react-native\";\n\nexport const sizes = [\"xsmall\", \"small\", \"medium\", \"large\", \"xlarge\"] as const;\n\nexport const type = [\"base\", \"rounded\"] as const;\n\nexport const color = [\n  \"viridian\",\n  \"malibu\",\n  \"yellow\",\n  \"purple\",\n  \"lilac\",\n  \"barbie\",\n  \"smoke\",\n  \"army\",\n  \"flubber\",\n  \"indigo\",\n  \"camel\",\n] as const;\n\nconst textSizes = {\n  xsmall: \"text-sm\",\n  small: \"text-sm\",\n  medium: \"text-md\",\n  large: \"text-2xl\",\n  xlarge: \"text-3xl\",\n};\n\nconst avatarVariants = cva({\n  base: \"flex shrink-0 items-center justify-center overflow-hidden text-center font-semibold\",\n  variants: {\n    size: {\n      xsmall: \"w-5 h-5 rounded-xs\",\n      small: \"w-6 h-6 rounded-sm\",\n      medium: \"w-8 h-8 rounded\",\n      large: \"w-14 h-14 rounded-xl\",\n      xlarge: \"w-18 h-18 rounded-[20px]\",\n    } satisfies Record<(typeof sizes)[number], string>,\n    type: {\n      base: \"\",\n      rounded: \"rounded-full\",\n    } satisfies Record<(typeof type)[number], string>,\n    color: {\n      viridian: \"bg-[hsl(theme(colors.viridian.50))]\",\n      malibu: \"bg-[hsl(theme(colors.malibu.50))]\",\n      yellow: \"bg-[hsl(theme(colors.yellow.50))]\",\n      purple: \"bg-[hsl(theme(colors.purple.50))]\",\n      lilac: \"bg-[hsl(theme(colors.lilac.50))]\",\n      barbie: \"bg-[hsl(theme(colors.barbie.50))]\",\n      smoke: \"bg-[hsl(theme(colors.smoke.50))]\",\n      army: \"bg-[hsl(theme(colors.army.50))]\",\n      flubber: \"bg-[hsl(theme(colors.flubber.50))]\",\n      indigo: \"bg-[hsl(theme(colors.indigo.50))]\",\n      camel: \"bg-[hsl(theme(colors.camel.50))]\",\n    } satisfies Record<(typeof color)[number], string>,\n  },\n  defaultVariants: {\n    size: \"medium\",\n    type: \"base\",\n    color: \"viridian\",\n  },\n});\n\ntype AvatarProps = React.ComponentPropsWithoutRef<typeof View> & {\n  size?: (typeof sizes)[number];\n  type?: (typeof type)[number];\n  color?: (typeof color)[number];\n  className?: string;\n};\n\nconst Avatar = ({ size, type, color, className, ...props }: AvatarProps) => (\n  <View\n    className={cn(avatarVariants({ size, type, color, className }))}\n    {...props}\n  />\n);\n\nconst AvatarImage = ({\n  className,\n  alt,\n  src,\n  ...props\n}: React.ComponentPropsWithoutRef<typeof View> & {\n  src?: string;\n  alt: string;\n}) => (\n  <View className={cn(\"aspect-square h-full w-full\", className)} {...props}>\n    <Image\n      style={{ width: \"100%\", height: \"100%\" }}\n      source={{\n        uri: src,\n      }}\n      aria-label={alt}\n    />\n  </View>\n);\n\nconst AvatarFallback = ({\n  className,\n  size = \"medium\",\n  ...props\n}: React.ComponentPropsWithoutRef<typeof Text> & {\n  size?: (typeof sizes)[number];\n}) => (\n  <Text\n    className={cn(\"text-f1-foreground-inverse/90\", textSizes[size], className)}\n    {...props}\n  />\n);\n\nexport { Avatar, AvatarFallback, AvatarImage };\n","import {\n  color as AvatarColors,\n  Avatar as AvatarComponent,\n  type as avatarType,\n  sizes,\n} from \"../../../ui/avatar\";\nimport { type ComponentProps } from \"react\";\n\ntype ShadAvatarProps = ComponentProps<typeof AvatarComponent>;\n\nexport function getInitials(\n  name: string | string[],\n  size?: ShadAvatarProps[\"size\"],\n  isFile?: boolean,\n): string {\n  const nameArray = Array.isArray(name) ? name : [name];\n  const isSmall = size === \"xsmall\" || size === \"small\";\n  const minChar = isFile ? 3 : 2;\n\n  if (isSmall) return (nameArray[0]?.[0] ?? \"\").toUpperCase();\n  if (!Array.isArray(name)) return name.slice(0, minChar).toUpperCase();\n\n  return nameArray\n    .slice(0, minChar)\n    .map((name) => name[0])\n    .join(\"\")\n    .toUpperCase();\n}\n\nexport function getAvatarColor(text: string): ShadAvatarProps[\"color\"] {\n  let hash = 0;\n\n  for (let i = 0; i < text.length; i++) {\n    hash = text.charCodeAt(i) + ((hash << 5) - hash);\n    hash = hash & hash;\n  }\n\n  const index =\n    ((hash % AvatarColors.length) + AvatarColors.length) % AvatarColors.length;\n\n  return AvatarColors[index];\n}\n\nexport const getMask = {\n  base: {\n    xlarge:\n      \"path('M72 0H0V72H52.202C49.6089 69.459 48 65.9174 48 62C48 54.268 54.268 48 62 48C65.9174 48 69.459 49.6089 72 52.202V0ZM72 71.798C71.9333 71.866 71.866 71.9333 71.798 72H72V71.798Z')\",\n    large:\n      \"path('M56 0H0V56H39.0556C37.1554 53.877 36 51.0734 36 48C36 41.3726 41.3726 36 48 36C51.0734 36 53.877 37.1554 56 39.0556V0Z')\",\n    medium:\n      \"path('M32 0H0V32H22.2547C21.4638 30.8662 21 29.4872 21 28C21 24.134 24.134 21 28 21C29.4872 21 30.8662 21.4638 32 22.2547V0Z')\",\n    small:\n      \"path('M24 0H0V24H14.2547C13.4638 22.8662 13 21.4872 13 20C13 16.134 16.134 13 20 13C21.4872 13 22.8662 13.4638 24 14.2547V0Z')\",\n    xsmall:\n      \"path('M20 0H0V20H10.2547C9.46381 18.8662 9 17.4872 9 16C9 12.134 12.134 9 16 9C17.4872 9 18.8662 9.46381 20 10.2547V0Z')\",\n  },\n  rounded: {\n    xlarge:\n      \"path('M69.1842 49.9814C70.9975 45.6828 72 40.9585 72 36C72 16.1177 55.8823 0 36 0C16.1177 0 0 16.1177 0 36C0 55.8823 16.1177 72 36 72C40.9585 72 45.6828 70.9975 49.9814 69.1842C48.7232 67.0839 48 64.6264 48 62C48 54.268 54.268 48 62 48C64.6264 48 67.0839 48.7232 69.1842 49.9814Z')\",\n    large:\n      \"path('M54.2534 37.7562C55.3828 34.7182 56 31.4312 56 28C56 12.536 43.464 0 28 0C12.536 0 0 12.536 0 28C0 43.464 12.536 56 28 56C31.4312 56 34.7182 55.3828 37.7562 54.2534C36.6421 52.4324 36 50.2912 36 48C36 41.3726 41.3726 36 48 36C50.2912 36 52.4324 36.6421 54.2534 37.7562Z')\",\n    medium:\n      \"path('M30.9702 21.6596C31.6358 19.9001 32 17.9926 32 16C32 7.16344 24.8366 0 16 0C7.16344 0 0 7.16344 0 16C0 24.8366 7.16344 32 16 32C17.9926 32 19.9001 31.6358 21.6596 30.9702C21.2365 30.0686 21 29.0619 21 28C21 24.134 24.134 21 28 21C29.0619 21 30.0686 21.2365 30.9702 21.6596Z')\",\n    small:\n      \"path('M23.8119 14.128C23.9355 13.4373 24 12.7262 24 12C24 5.37258 18.6274 0 12 0C5.37258 0 0 5.37258 0 12C0 18.6274 5.37258 24 12 24C12.7262 24 13.4373 23.9355 14.128 23.8119C13.4145 22.7151 13 21.406 13 20C13 16.134 16.134 13 20 13C21.406 13 22.7151 13.4145 23.8119 14.128Z')\",\n    xsmall:\n      \"path('M19.9969 10.2525C19.999 10.1686 20 10.0844 20 10C20 4.47715 15.5228 0 10 0C4.47715 0 0 4.47715 0 10C0 15.5228 4.47715 20 10 20C10.0844 20 10.1686 19.999 10.2525 19.9969C9.46297 18.8636 9 17.4859 9 16C9 12.134 12.134 9 16 9C17.4859 9 18.8636 9.46297 19.9969 10.2525Z')\",\n  },\n  get: (\n    type: (typeof avatarType)[number] = \"base\",\n    size: (typeof sizes)[number] = \"medium\",\n  ) => getMask[type][size],\n} as const;\n"]}