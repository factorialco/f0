import {
  color as AvatarColors,
  Avatar as AvatarComponent,
  sizes,
} from "@/ui/avatar"
import { type ComponentProps } from "react"

type ShadAvatarProps = ComponentProps<typeof AvatarComponent>

export function getInitials(
  name: string | string[],
  size?: ShadAvatarProps["size"]
): string {
  const nameArray = Array.isArray(name) ? name : [name]
  const isSmall = size === "xsmall" || size === "small"

  if (isSmall) return (nameArray[0][0] ?? "").toUpperCase()
  if (!Array.isArray(name)) return name.slice(0, 2).toUpperCase()

  return nameArray
    .slice(0, 2)
    .map((name) => name[0])
    .join("")
    .toUpperCase()
}

export function getAvatarColor(text: string): ShadAvatarProps["color"] {
  let hash = 0

  for (let i = 0; i < text.length; i++) {
    hash = text.charCodeAt(i) + ((hash << 5) - hash)
    hash = hash & hash
  }

  const index =
    ((hash % AvatarColors.length) + AvatarColors.length) % AvatarColors.length

  return AvatarColors[index]
}

type MaskVariant = "default" | "module"
type MaskSize = (typeof sizes)[number]
type MaskType = "base" | "rounded"

type MaskPaths = {
  [K in MaskType]: {
    [S in MaskSize]: {
      [V in MaskVariant]: string
    }
  }
}

export const getMask = {
  base: {
    xlarge: {
      default:
        "path('M72 0H0V72H52.202C49.6089 69.459 48 65.9174 48 62C48 54.268 54.268 48 62 48C65.9174 48 69.459 49.6089 72 52.202V0ZM72 71.798C71.9333 71.866 71.866 71.9333 71.798 72H72V71.798Z')",
      module:
        "path('M72 0H0V72H52.202C49.6089 69.459 48 65.9174 48 62C48 54.268 54.268 48 62 48C65.9174 48 69.459 49.6089 72 52.202V0ZM72 71.798C71.9333 71.866 71.866 71.9333 71.798 72H72V71.798Z')",
    },
    large: {
      default:
        "path('M56 0H0V56H39.0556C37.1554 53.877 36 51.0734 36 48C36 41.3726 41.3726 36 48 36C51.0734 36 53.877 37.1554 56 39.0556V0Z')",
      module:
        "path('M56 0H0V56H39.0556C37.1554 53.877 36 51.0734 36 48C36 41.3726 41.3726 36 48 36C51.0734 36 53.877 37.1554 56 39.0556V0Z')",
    },
    medium: {
      default:
        "path('M32 0H0V32H22.2547C21.4638 30.8662 21 29.4872 21 28C21 24.134 24.134 21 28 21C29.4872 21 30.8662 21.4638 32 22.2547V0Z')",
      module:
        "path('M32 0H0V32H22.2547C21.4638 30.8662 21 29.4872 21 28C21 24.134 24.134 21 28 21C29.4872 21 30.8662 21.4638 32 22.2547V0Z')",
    },
    small: {
      default:
        "path('M24 0H0V24H14.2547C13.4638 22.8662 13 21.4872 13 20C13 16.134 16.134 13 20 13C21.4872 13 22.8662 13.4638 24 14.2547V0Z')",
      module:
        "path('M24 0H0V24H14.2547C13.4638 22.8662 13 21.4872 13 20C13 16.134 16.134 13 20 13C21.4872 13 22.8662 13.4638 24 14.2547V0Z')",
    },
    xsmall: {
      default:
        "path('M20 0H0V20H10.2547C9.46381 18.8662 9 17.4872 9 16C9 12.134 12.134 9 16 9C17.4872 9 18.8662 9.46381 20 10.2547V0Z')",
      module:
        "path('M20 0H0V20H10.2547C9.46381 18.8662 9 17.4872 9 16C9 12.134 12.134 9 16 9C17.4872 9 18.8662 9.46381 20 10.2547V0Z')",
    },
  },
  rounded: {
    xlarge: {
      default:
        "path('M69.1842 49.9814C70.9975 45.6828 72 40.9585 72 36C72 16.1177 55.8823 0 36 0C16.1177 0 0 16.1177 0 36C0 55.8823 16.1177 72 36 72C40.9585 72 45.6828 70.9975 49.9814 69.1842C48.7232 67.0839 48 64.6264 48 62C48 54.268 54.268 48 62 48C64.6264 48 67.0839 48.7232 69.1842 49.9814Z')",
      module:
        "path('M36 0C55.8823 0 72 16.1177 72 36C72 40.588 71.139 44.9745 69.5742 49.0098C67.6022 48.3059 65.1076 48 62 48C51.5 48 48 51.5 48 62C48 65.1077 48.3067 67.6022 49.0107 69.5742C44.9752 71.1392 40.5883 72 36 72C16.1177 72 0 55.8823 0 36C0 16.1177 16.1177 0 36 0Z')",
    },
    large: {
      default:
        "path('M54.2534 37.7562C55.3828 34.7182 56 31.4312 56 28C56 12.536 43.464 0 28 0C12.536 0 0 12.536 0 28C0 43.464 12.536 56 28 56C31.4312 56 34.7182 55.3828 37.7562 54.2534C36.6421 52.4324 36 50.2912 36 48C36 41.3726 41.3726 36 48 36C50.2912 36 52.4324 36.6421 54.2534 37.7562Z')",
      module:
        "path('M28 0C43.464 0 56 12.536 56 28C56 31.108 55.4924 34.0972 54.5576 36.8906C52.8571 36.2704 50.6984 36 48 36C39 36 36 39 36 48C36 50.6984 36.2704 52.8571 36.8906 54.5576C34.0972 55.4924 31.108 56 28 56C12.536 56 0 43.464 0 28C0 12.536 12.536 0 28 0Z')",
    },
    medium: {
      default:
        "path('M30.9702 21.6596C31.6358 19.9001 32 17.9926 32 16C32 7.16344 24.8366 0 16 0C7.16344 0 0 7.16344 0 16C0 24.8366 7.16344 32 16 32C17.9926 32 19.9001 31.6358 21.6596 30.9702C21.2365 30.0686 21 29.0619 21 28C21 24.134 24.134 21 28 21C29.0619 21 30.0686 21.2365 30.9702 21.6596Z')",
      module:
        "path('M16 0C24.8366 0 32 7.16344 32 16C32 17.8588 31.6815 19.6431 31.0986 21.3027C30.238 21.0945 29.2125 21 28 21C22.75 21 21 22.75 21 28C21 29.2125 21.0945 30.238 21.3027 31.0986C19.6431 31.6815 17.8588 32 16 32C7.16344 32 0 24.8366 0 16C0 7.16344 7.16344 0 16 0Z')",
    },
    small: {
      default:
        "path('M23.8119 14.128C23.9355 13.4373 24 12.7262 24 12C24 5.37258 18.6274 0 12 0C5.37258 0 0 5.37258 0 12C0 18.6274 5.37258 24 12 24C12.7262 24 13.4373 23.9355 14.128 23.8119C13.4145 22.7151 13 21.406 13 20C13 16.134 16.134 13 20 13C21.406 13 22.7151 13.4145 23.8119 14.128Z')",
      module:
        "path('M12 0C18.6274 0 24 5.37258 24 12C24 12.5245 23.9657 13.0411 23.9004 13.5479C22.8971 13.1662 21.6141 13 20 13C14.75 13 13 14.75 13 20C13 21.6141 13.1662 22.8971 13.5479 23.9004C13.0411 23.9657 12.5245 24 12 24C5.37258 24 0 18.6274 0 12C0 5.37258 5.37258 0 12 0Z')",
    },
    xsmall: {
      default:
        "path('M10 0C15.5228 0 20 4.47715 20 10C20 10.5862 19.9464 11.1602 19.8496 11.7188C19.0019 11.2604 18.0314 11 17 11C13.6863 11 11 13.6863 11 17C11 18.0314 11.2604 19.0019 11.7188 19.8496C11.1602 19.9464 10.5862 20 10 20C4.47715 20 0 15.5228 0 10C0 4.47715 4.47715 0 10 0Z')",
      module:
        "path('M10 0C15.5228 0 20 4.47715 20 10C20 10.4498 19.9667 10.8921 19.9092 11.3262C19.1218 11.1008 18.1609 11 17 11C12.5 11 11 12.5 11 17C11 18.1609 11.1008 19.1218 11.3262 19.9092C10.8921 19.9667 10.4498 20 10 20C4.47715 20 0 15.5228 0 10C0 4.47715 4.47715 0 10 0Z')",
    },
  },
  get: (
    type: MaskType = "base",
    size: MaskSize = "medium",
    variant: MaskVariant = "default"
  ): string => getMask[type][size][variant],
} as const satisfies {
  base: MaskPaths["base"]
  rounded: MaskPaths["rounded"]
  get: (type: MaskType, size: MaskSize, variant: MaskVariant) => string
}
