---
description: Guidelines for documentation standards
globs: 
alwaysApply: false
---
```tsx
import { Canvas, Meta, Controls, Unstyled } from "@storybook/blocks"
import { DoDonts } from "@/lib/storybook-utils/do-donts"

import * as COMPONENT_STORIES from "./ComponentFolder/index.stories"

<Meta of={COMPONENT_STORIES} />
```

# Component title

## Purpose of this document

Before documenting the requested component, try to:

- Read the component and its subcomponents to understand what the component does.
- Detect if there are any props that could generate variants. If none exist, you can skip the `Variants` section in the documentation.

This documentation has the following goals:

- It should be friendly for both designers (non-technical) and developers.
- Designers might use this to explore edge cases that are difficult to test in Figma.
- The documentation should be focused on practical use cases.
- Every field or prop should include at least a minimal description, even if the purpose seems obvious.

## Introduction

### Definition

A short description of what the component is and its role within the interface.

### Purpose

- Describe the key objectives the component fulfills.
- Use bullet lists with `-`.
- Keep descriptions concise and action-oriented.

## Anatomy

Check all the COMPONENT_STORIES to find the most complete one to use for Anatomy

```tsx
<Canvas of={COMPONENT_STORIES.XXXX} meta={COMPONENT_STORIES} />
<Controls of={COMPONENT_STORIES.XXXX} />
```

Describe the general layout and structure of the component. Add subsections if the component includes common interactive elements such as:

### Common actions

#### Primary action
- Position and visual prominence
- Typical action examples

#### Edit
- Should include âœŽ icon
- Uses outline button

#### Destructive
- Placed far left
- Includes ðŸ—‘ icon and confirmation dialog
- Uses a critical button style

## Variants

If the component has significant variants (i.e., based on context or props), list them here. For each variant:

### Variant name

Short description of when and why to use this variant.

```tsx
<Canvas of={COMPONENT_STORIES.VariantName} />
```

## Guidelines

### Content best practices

- Titles should be short (2-5 words), no punctuation.
- Use meaningful descriptions in 1-2 sentences.
- Use action verbs in [verb + noun] format.
- Capitalize only the first word unless it's a proper noun.

### Design best practices

```tsx
<DoDonts
  do={{
    description: "Use this component when:",
    guidelines: [
      "It displays critical information",
      "It offers key contextual actions"
    ],
    children: <img src="docs/component-name/do.png" />
  }}
  dont={{
    description: "Don't use this component when:",
    guidelines: [
      "The page does not represent a specific resource",
      "There are no contextual actions"
    ],
    children: <img src="docs/component-name/dont.png" />
  }}
/>
```

### Layout

- Describe how elements are visually structured and prioritized.
- Include layout image if needed:

`img src="docs/component-name/layout.png" alt="Layout structure" />
```

## [Component-specific section, if any]

For example: `## Resource metadata`

Give an overview of this section's goal within the component.

```tsx
<Canvas of={COMPONENT_STORIES.SomeStory} />
```

### Variants

1. **Text**: Description
2. **Avatar**: Description
3. **Status**: Description
...

### Guidelines

- Keep label conventions consistent
- Group related metadata
- Prioritize important info in layout

### Behavior

Describe dynamic interactions such as hover states or contextual actions.

```tsx
<Canvas of={COMPONENT_STORIES.WithActions} />
```

On hover, the following may be shown:

- **Inline Edit**: Edit field directly
- **Quick Copy**: Copy value
- **Side Panel**: Open detail view or complex editor
- **Tooltip Info**: Show extra context when needed

---

## Notes for the AI

- The component title must be capitalized (`Component title`)
- Use proper heading structure (`##`, `###`, etc.)
- Always use `Canvas of={...}` to illustrate examples
- Omit `Variants` section if none exist
- Add a `## Props` section (optional) if props are complex or need explanation
- Keep alignment with visual design and actual usage
- Create the stories and docs in the`__stories__` subfolder 
- The story title for a component must follow `Components/[Component name without the One prefix]`

