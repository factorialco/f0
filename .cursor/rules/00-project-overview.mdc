---
description: "F0 DS - Overview and Key Principles"
globs: ""
alwaysApply: true
---

# F0 Design System - Overview

## Key Principles

- Write modular, reusable components following atomic design principles.
- Use TypeScript with strict type safety.
- Follow functional and declarative programming patterns.
- Implement comprehensive tests and ensure accessibility (a11y) compliance in all components.
- Support both web and mobile platforms with consistent design patterns.
- All code generated and comments should be in English
- pnpm package manager is used to run all commands

## Project Structure

- `/packages/core`: Core component library and utilities

  - Shared types, utilities, and base configurations
  - Platform-agnostic business logic and helpers

- `/packages/react`: Web Components Library

  - `/src/components`: Production-ready UI components
  - `/src/experimental`: Components in development phase
  - `/src/lib`: Shared utilities and handlers
  - `/src/ui`: Internal UI components
  - Stories and tests alongside components (`*.stories.tsx`, `*.spec.tsx`)

- `/packages/react-native`: Mobile Components Library

  - Native implementations of the design system
  - Platform-specific adaptations of core components
  - Mobile-first user experience patterns

- `/packages/playground`: Development Environment

  - Testing ground for new components
  - Integration examples
  - Development tools and utilities

- `/packages/examples`: Implementation Examples

  - Real-world usage examples
  - Integration patterns
  - Best practices demonstrations

- `/icons`: Shared icon assets
  - SVG source files
  - Icon components for both platforms

## Documentation Structure

Each component should include:

- Component file (`index.tsx`)
- Story file (`*.stories.tsx`) for Storybook documentation
- Test file (`*.spec.tsx`) for unit/integration tests
- Documentation file (`*.mdx`) when needed for complex components

# F0 DS - Master Index

Below are existing rules containing specific guidelines. **Before generating any code or response, analyze the user's request for keywords related to these topics. If keywords match, PRIORITIZE and APPLY the corresponding @-rule's instructions.** Explicitly state which rule you are consulting if relevant.

1.  [01-component-guidelines.mdc](mdc:.cursor/rules/01-component-guidelines.mdc) **Keywords:** new component, create component, component structure, atomic design. Consult for component creation standards.
2.  [02-typescript-testing.mdc](mdc:.cursor/rules/02-typescript-testing.mdc) **Keywords:** test, testing, spec file, unit test, integration test, `*.spec.tsx`. Consult for testing requirements and practices.
3.  [03-styling.mdc](mdc:.cursor/rules/03-styling.mdc) **Keywords:** styles, styling, CSS, Emotion, design tokens, theme. Consult for styling conventions.
4.  [04-dependencies-tools.mdc](mdc:.cursor/rules/04-dependencies-tools.mdc) **Keywords:** dependency, library, tool, npm package, yarn. Consult for managing external dependencies.
5.  [05-performance-docs.mdc](mdc:.cursor/rules/05-performance-docs.mdc) **Keywords:** performance, optimization, documentation, JSDoc, comments. Consult for performance best practices and documentation standards.
6.  [06-build-release.mdc](mdc:.cursor/rules/06-build-release.mdc) **Keywords:** build, release, deployment, bundling. Consult for build and release processes.
7.  [07-available-commands.mdc](mdc:.cursor/rules/07-available-commands.mdc) **Keywords:** command, script, yarn command, npm script. Consult for available project commands.
8.  [08-testing-on-storybook.mdc](mdc:.cursor/rules/08-testing-on-storybook.mdc) **Keywords:** storybook, story, stories, `*.stories.tsx`, interaction test, play function, storybook test. Consult for Storybook usage and testing.
9.  [09-document-a-component.mdc](mdc:.cursor/rules/09-document-a-component.mdc) **Keywords:** document component.

Use these rules to guide code generation and project-wide standards. **Confirm keyword matches before applying.**
