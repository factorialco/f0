---
description: 
globs: 
alwaysApply: false
---
**1. Generation of `{{dirPath}}/index.stories.tsx`:**

*   **Required Imports:**
    *   `import type { Meta, StoryObj } from "@storybook/react";`
    *   Import the React component from the selected file (e.g., `import MyComponent from "./index";`). Determine the name of the default exported component or the main one from `{{selectedCode}}`. If there's no default export, look for a named export that matches the folder name or a primary name. Call this `ComponentUnderTest`.
    *   `import { expect, userEvent, within } from "@storybook/test";`
*   **`Meta` Definition:**
    *   Create a `meta` object of type `Meta<typeof ComponentUnderTest>`.
    *   Set the `component: ComponentUnderTest` property.
    *   Set the `title` property. Use a naming convention based on the file path, for example, if the file is `src/components/Input/index.tsx`, the `title` could be `Components/Input`. Adjust the logic to remove `src/` and `index.tsx` and capitalize segments if necessary.
    *   Include `tags: ['autodocs']` to enable basic automatic documentation from Storybook.
*   **`StoryObj` Definition:**
    *   Define the type `type Story = StoryObj<typeof meta>;`.
*   **Story Generation (Example: `Default`):**
    *   Create at least one exported story, for example: `export const Default: Story = { args: {} };`.
    *   **Prop Analysis:** Inspect the props of the `ComponentUnderTest` (using `{{selectedCode}}`). If you find required or obvious props, try to provide reasonable example values in the `args` object of the `Default` story.
*   **Integration Test Generation (`play` function):**
    *   **IMPORTANT!** For the `Default` story (and potentially other stories you deem necessary based on the analysis), add a `play` function.
    *   Inside `play({ canvasElement, step })`:
        *   Get the `canvas` using `const canvas = within(canvasElement);`.
        *   **Complexity Analysis:** **Carefully analyze the component's code (`{{selectedCode}}`)**. Identify the main interactive elements (buttons, inputs, selects, etc.), key states, and the most important user flows.
        *   **Test Generation:** Based on your analysis, write **meaningful integration tests** using `userEvent`, `within`, and `expect`. Simulate user interactions (clicks, typing, selections) and verify that the component reacts as expected (DOM changes, function calls if passed as mocked props in `args`, visual states). Use `step` to group logical actions. **Be exhaustive and adapt the test complexity to the component's complexity.** For example:
            *   For a form: Fill fields, simulate submission, verify validations.
            *   For a button: Simulate click, verify if `onClick` is called (if it can be mocked/spied on).
            *   For a component with internal state: Simulate actions that change the state and verify the visual/DOM result.
*   **Format and Structure:** Ensure the generated file is valid TypeScript code and follows standard formatting conventions.

**2. Generation of `{{dirPath}}/index.mdx`:**

*   **Required Imports:**
    *   `import { Meta, Primary, Controls, Story, Canvas } from "@storybook/blocks";`
    *   `import * as ComponentStories from "./index.stories.tsx";` (Ensure the `ComponentStories` name is consistent or use a name derived from the component).
*   **MDX Content:**
    *   **`<Meta of={ComponentStories} />`**: Include this tag at the beginning to link the MDX with the stories defined in `index.stories.tsx`.
    *   **Basic Structure:** Generate a basic documentation structure inspired by the provided example, but keep it generic initially. Include:
        *   A main heading (e.g., `## [Component Name]`). Try to extract the component name.
        *   An `## Introduction` section with placeholder text like "Detailed documentation for the [Component Name] component."
        *   **Story Rendering:** For each exported story in `index.stories.tsx` (at least `Default`), include a `<Canvas of={ComponentStories.StoryName} />` block. For example:
            ```mdx
            ### Default

            <Canvas of={ComponentStories.Default} />
            <Controls of={ComponentStories.Default} /> // Optional: add controls below the canvas
            ```
    *   **Placeholders for Additional Documentation:** You can add placeholder sections like `## Props`, `## Usage Examples`, etc., for the developer to fill in. The example you gave me about `react-hook-form` and `zod` is very specific; the rule should generate a more general *template*.
*   **Format:** Ensure the generated file is a valid MDX file.

**Output Summary:**
The rule must create two files (`index.stories.tsx`, `index.mdx`) in the same folder as `{{selectedFile}}`, with the content detailed above, paying special attention to the component analysis to generate relevant integration tests in the `play` function.

---