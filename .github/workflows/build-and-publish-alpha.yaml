name: Build and publish [ALPHA]

on:
  issue_comment:
    types: [ created ]
  pull_request:
    types: [ opened, synchronize ]

jobs:
  ##################
  # Alpha versions #
  ##################
  publish-alpha:
    if: |
      (github.event_name == 'issue_comment' &&
       github.event.issue.pull_request &&
       contains(github.event.comment.body, 'build')) ||
      github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}


      - uses: ./.github/actions/setup-node-pnpm
        name: Setup Node and pnpm

      - name: Build
        run: pnpm build

      - name: Create new version
        run: |
          # Get lastest version from  package.json
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          PR_NUMBER=${{ github.event.pull_request.number }}
          COMMIT_SHA=$(git rev-parse --short ${{ github.sha }})
          
          # Create alpha version 
          ALPHA_VERSION="${CURRENT_VERSION}-alpha.pr-${PR_NUMBER}-$(date +%Y%m%d%H%M%S)-${COMMIT_SHA}"
          
          # Update package.json version
          pnpm version $ALPHA_VERSION --no-git-tag-version
        env:
          NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Publish to registry
        run: |
          # Publish alpha version
          pnpm publish --tag alpha --no-git-checks
        env:
          NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Remove old alpha versions
        run: |
          # Get the alpha versions and their publish dates
          PACKAGE_FULL_NAME=$(node -p "require('./package.json').name")
          ALPHA_INFO=$(npm view $PACKAGE_FULL_NAME time --json | jq 'to_entries | map(select(.key | contains("-alpha"))) | map({version: .key, date: .value})')
          CURRENT_DATE=$(date +%s)
          
          REMOVE_DAYS=5
          # days in seconds
          REMOVE_DAYS_IN_SECONDS=$((REMOVE_DAYS * 24 * 60 * 60))
          
          echo "Removing alpha versions $REMOVE_DAYS days old or older"
          
          # Process each alpha version
          echo "$ALPHA_INFO" | jq -c '.[]' | while read -r VERSION_DATA; do
            VERSION=$(echo "$VERSION_DATA" | jq -r '.version')
          
            PUBLISH_DATE=$(echo "$VERSION_DATA" | jq -r '.date')          
            PUBLISH_DATE_SECONDS=$(date -d "$PUBLISH_DATE" +%s)
          
            DIFF_SECONDS=$((CURRENT_DATE - PUBLISH_DATE_SECONDS))
          
            if [ $DIFF_SECONDS -gt $REMOVE_DAYS_IN_SECONDS ]; then
              echo "Removing version $VERSION published at $PUBLISH_DATE"
          
              # Split the string using the '/' character
              ORG="${PACKAGE_FULL_NAME#@}"   # Remove the '@' from the start
              ORG="${ORG%%/*}"          # Extract the part before the first '/'  
              PACKAGE="${PACKAGE_FULL_NAME#*/}"  # Remove everything before the first '/' (including the '/')
          
              # Get the version id from the version name
              VERSION_ID=$(curl -s -H "Authorization: Bearer $GITHUB_TOKEN" \
                "https://api.github.com/orgs/$ORG/packages/npm/$PACKAGE/versions" | \
                jq -r ".[] | select(.name == \"$VERSION\") | .id")
          
              # Delete the version using github api as npm unpublish is not supported in github registry          
              DELETE_RESPONSE=$(curl -s -o /dev/null -w "%{http_code}" -X DELETE \
                -H "Authorization: Bearer $GITHUB_TOKEN" \
                  "https://api.github.com/orgs/$ORG/packages/npm/$PACKAGE/versions/$VERSION_ID")
          
              # Check for errors based on the HTTP status code
              if [ "$DELETE_RESPONSE" -ge 200 ] && [ "$DELETE_RESPONSE" -lt 300 ]; then
                echo "Successfully deleted version $VERSION_TO_DELETE"
              else
                echo "Error deleting version $VERSION_TO_DELETE: HTTP $DELETE_RESPONSE"
                exit 1
              fi
            fi
          done
        env:
          NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
